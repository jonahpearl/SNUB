Tutorials
=========

This tutorial describes how to setup a SNUB project with video, neural activity recordings and behavioral annotations. The neural activity is used to generate a low-dimensional UMAP embedding, and we describe some of the user-interface tools that help link the embedding to single-neuron traces and to behavior. There are two example pipelines for calcium imaging and electrophysiology respectively

Calcium Imaging
---------------

Download the `example behavior and calcium imaging data <https://www.dropbox.com/sh/1suksns550opt5x/AAAhNxCRGw3LXKJPosYLhrzRa?dl=0>`_. The final SNUB 
project directory generated in this tutorial is `ca2_imaging_project <https://www.dropbox.com/sh/ujr3ttdc3gsxtqt/AAAKLL9iaF54cOwPKRPMTENIa?dl=0>`_. 
This tutorial is based on head-mounted 1-photon calcium imaging and video recordings
from a mouse engaged in social interaction. The camera and microscope were synchronized 
and have associated timestamps in seconds. There are also a behavior annotations
for each frame generated by MoSeq. 




Load data
~~~~~~~~~

The ephys data consists of sorted spikes, including their timestamps ``spike_times`` and unit assignments ``spike_labels``. The units were filtered for quality, yielding a subset ``good_units`` for analysis in SNUB.  

.. code-block:: python

    import numpy as np

    # Load Z-scored calcium traces for each cell
    calcium_data = np.load('calcium_data.npy')

    # Load video timestamps
    video_timestamps = np.load('video_timestamps.npy')

    # Load mouse velocity
    behavior_annotations = np.load('behavior_annotations.npy')
    behavior_labels = open('behavior_labels.txt','r').read().split('\n')


Create a SNUB project
~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    import snub.io

    project_directory = 'ca2_imaging_project'
    snub.io.create_project(
        project_directory, 
        start_time=video_timestamps.min(),
        end_time=video_timestamps.max())



Add IR video 
~~~~~~~~~~~~

This experiment was originally filmed in 16bit monochrome. The ``.mp4``
file below was generated using :py:meth:`snub.io.transform_azure_ir_stream`

.. code-block:: python

    video_path = 'ir_video.mp4'
    snub.io.add_video(
        project_directory, 
        video_path, 
        timestamps=video_timestamps,
        name='IR_camera')


Add calcium traces
~~~~~~~~~~~~~~~~~~

.. code-block:: python

    snub.io.add_heatmap(
        project_directory, 
        'my_ca2_data',
        calcium_data,
        sort_method='rastermap',
        height_ratio=10,
        vmin=0, vmax=4,
        start_time=6.666, # the calcium recordings began after the IR video started
        binsize=1/15) # the head mounted miniscope recordes at 15 fps

Add behavior annotations
~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    snub.io.add_heatmap(
        project_directory, 
        'behavior annotations',
        behavior_annotations,
        labels=behavior_labels,
        height_ratio=3,
        start_time=0.1,
        binsize=1/30)


Add a UMAP plot of neural activity states
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    # bin the calcium data into 400ms bins prior to UMAP
    binned_calcium_data,_ = snub.io.bin_data(calcium_data, 6)

    # bin the behavior annotations so we can plot them over the UMAP
    # also truncate so that they are aligned with the neural data start time
    behavior_truncated = behavior_annotations[:,200:-200]
    binned_behavior_annotations,_ = snub.io.bin_data(behavior_truncated, 12)

    # check that truncation was correct - array sizes must have same # of columns
    print(binned_calcium_data.shape, binned_behavior_annotations.shape)

    coordinates = snub.io.umap_embedding(
        binned_calcium_data,
        n_pcs=10,
        n_neighbors=100)

    snub.io.add_scatter(
        project_directory,
        'umap embedding',
        coordinates,
        binsize=0.5,
        start_time=6.666,
        pointsize=5,
        features=binned_behavior_annotations.T,
        feature_labels=behavior_labels)





Electrophysiology
-----------------


Download the `example ephys and video data <https://www.dropbox.com/sh/76kwzun33lskhil/AACtT97l-CJy6K6GR6R965kLa?dl=0>`_. The final SNUB 
project directory generated in this tutorial is `ephys_project <https://www.dropbox.com/sh/6ae5z4jw6c769xa/AABWNS8iWV-yUEFEPJ9CD2pda?dl=0>`_. This tutorial is based on electrophysiology and video recordings from a 
mouse behaving in an open field. The camera and ephys probe were synchronized 
and have associated timestamps in seconds. 



Load data
~~~~~~~~~

The ephys data consists of sorted spikes, including their timestamps ``spike_times`` and unit assignments ``spike_labels``. The units were filtered for quality, yielding a subset ``good_units`` for analysis in SNUB.  

.. code-block:: python

    import numpy as np

    # Load ephys data
    spike_times = np.load('spike_times.npy')
    spike_labels = np.load('spike_labels.npy')
    good_units = np.load('good_units.npy')

    # Load video timestamps
    video_timestamps = np.load('behavior_video_timestamps.npy')

    # Load mouse velocity
    mouse_velocity = np.load('mouse_velocity.npy')
    velocity_timestamps = np.load('mouse_velocity_timestamps.npy')


Create a SNUB project
~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    import snub.io

    project_directory = 'ephys_project'
    snub.io.create_project(
        project_directory, 
        start_time=spike_times.min(),
        end_time=spike_times.max())


Add IR video 
~~~~~~~~~~~~

This experiment was originally filmed in 16bit monochrome. The ``.mp4``
file below was generated using :py:meth:`snub.io.transform_azure_ir_stream`

.. code-block:: python

    video_path = 'behavior_video.mp4'
    snub.io.add_video(
        project_directory, 
        video_path, 
        timestamps=video_timestamps,
        name='IR_camera')


Add spike-sorted ephys data
~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    # remove all spikes with a label not in good_units
    good_spikes = np.in1d(spike_labels, good_units)
    spike_times = spike_times[good_spikes]
    spike_labels = spike_labels[good_spikes]

    # rename spike labels as consecutive integers
    renaming_dict = {old:new for new,old in enumerate(good_units)}
    spike_labels = np.array([renaming_dict[i] for i in spike_labels])

    snub.io.add_spikeplot(
        project_directory, 
        'my_ephys_data',
        spike_times,
        spike_labels,
        labels=[str(i) for i in good_units],
        sort_method='rastermap',
        height_ratio=10)


Add a UMAP plot of neural activity states
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    # Generate UMAP coordinates using ephys firing rates
    # calculated from non-overlapping 100ms windows

    firing_rates, start_time = snub.io.firing_rates(
        spike_times,
        spike_labels,
        window_size=0.1,
        window_step=0.1)

    coordinates = snub.io.umap_embedding(
        firing_rates,
        min_dist=.01)

    snub.io.add_scatter(
        project_directory,
        'umap embedding',
        coordinates,
        binsize=0.1,
        start_time=start_time)


Add a plot of mouse velocity
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    traces = {'velocity': np.vstack((velocity_timestamps,mouse_velocity)).T}

    snub.io.add_traceplot(
        project_directory,
        'velocity',
        traces,
        linewidth=2)



Using the interface
-------------------

Start SNUB from the command line::

    conda activate snub
    snub

Open a project
~~~~~~~~~~~~~~

Open your project by going to ``File > Open Project``, navigating to the project directory, and hitting ``Choose`` with the directory selected. Multiple projects can be opened at once as different tabs. Projects can also be opened by including their paths as a command line arguments::

   snub /path/to/project1 /path/to/project2

.. image:: ../media/use_case0.gif
   :align: center

|

Navigate the timeline
~~~~~~~~~~~~~~~~~~~~~

The brower is divided into two sections. The track-stack (on the right below) contains data-views that have time as a dimension, such as heatmaps, trace plots and spike plots. The tracks are always synchronized so that the same horizontal coordinate represents the same point in time. 

* Click/drag to change the current time.
* Use scrolls/gestures to change the visible time window.  
* Use the play button and speed slider at the bottom to watch in real time
* Toggle "center playhead" to keep the current time centered
* Toggle the timeline unit between minutes:seconds and "timestemps". Timesteps are multiples of the ``min_step`` parameters in the projects config file, and can be useful for accessing specific timepoinmts (e.g. video frames) outside of SNUB.

.. image:: ../media/use_case1.gif
   :align: center

|

Plot activity traces
~~~~~~~~~~~~~~~~~~~~

By default, all heatmaps and spike plots are paired with a trace plot (set ``add_traceplot=False`` to override). 

* Right click on any row of the heatmap/spike-plot to view it in the trace plot. 
* View groups of rows in more detail using the vertical zoom and shift buttons in the right-click menu. 

.. image:: ../media/use_case3.gif
   :align: center

|

Use selections
~~~~~~~~~~~~~~

The panel-stack (on the left below) contains data-views such as videos, scatter plots and 3D mesh views. The video panel always displays the current frame and the scatter plot highlights any nodes that represent the current time. A useful way to relate the scatter plot and timeline views is through selections.

* Use shift+drag to select points in the scatter view or intervals in the timeline.
* Use command/control+drag to deselect points and intervals.
* Selections are synchronized across all views.
* Selections can also be used to re-order the rows of a heatmap based on the total activity within the selected interval(s).

.. image:: ../media/use_case2.gif
   :align: center

|

Color the scatter plot
~~~~~~~~~~~~~~~~~~~~~~

Another way to probe the scatter plot is through node coloring.

* Use right-click -> "Color by ..." to view variables of interest in the scatter plot.
* Include variables using ``features`` and ``feature_labels`` in :py:func:`snub.io.add_scatter`.
* Bring nodes with high values to the top using right-click -> "Sort by color value".

.. image:: ../media/use_case4.gif
   :align: center

