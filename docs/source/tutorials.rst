Tutorials
=========


Build a SNUB project
--------------------

The data for this example are available via Dropbox. They include electrophysiology 
and video data from a mouse behaving in an open field. The camera and ephys 
probe were synchronized and have associated timestamps encoded using the 
30,000 Hz sampling frequency of the ephys acquisition board. The example data
also includes a sequence of behavior annotations generated by MoSeq.
The code below is also in this jupyter notebook. 

Load data
~~~~~~~~~

.. code-block:: python

    import numpy as np

    # Load spike times (in )
    spike_times = np.load('example_data_ephys/spike_times.npz')
    spike_labels = np.load('example_data_ephys/spike_labels.npz')

    # Convert time unit to seconds
    spike_times = spike_times / 30000

    # Load video timestamps
    video_timestamps = np.load('example_data_ephys/behavior_video_timestamps.npy')

    # Load moseq behavior labels
    moseq_labels = np.load('example_data_ephys/moseq_labels.npy')
    moseq_timestamps = np.load('example_data_ephys/moseq_timestamps.npy')

    # Load additional behavior variables
    mouse_velocity = np.load('example_data_ephys/mouse_velocity.npy')
    velocity_timestamps = np.load('example_data_ephys/mouse_velocity_timestamps.npy')




Create a SNUB project with video and ephys data
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The experiment was originally filmed in 16bit monochrome. The ``.mp4``
file below was generated using :py:meth:`snub.io.video.transform_azure_ir_stream`

.. code-block:: python

    import snub.io.project

    # Create project directory and config file

    project_directory = 'my_ephys_project'
    snub.io.project.create_project(
        project_directory, 
        start_time=video_timestamps.min(),
        end_time=video_timestamps.max())

    # Add video

    video_path = 'example_data_ephys/behavior_video.mp4'
    snub.io.project.add_video(
        project_directory, 
        video_path, 
        timestamps=video_timestamps,
        name='IR_camera')

    # Add ephys

    snub.io.project.add_spikeplot(
        project_directory, 
        'my_ephys_data',
        spike_times,
        spike_labels,
        sort_method='rastermap',
        height_ratio=10)


Add behavior annotations
~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    # One-hot encode behavior labels to view in SNUB as a binary heatmap

    num_labels = np.max(moseq_labels)+1
    moseq_1hot = np.eye(num_labels)[:,moseq_labels]

    snub.io.project.add_heatmap(
        project_directory, 
        'moseq_labels',
        moseq_1hot,
        colormap='Reds',
        height_ratio=5)


Add a UMAP plot of neural activity states
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    import snub.io.manifold

    # Generate UMAP coordinates using ephys firing rates
    # calculated from non-overlapping 100ms windows

    firing_rates, start_time = snub.io.manifold.firing_rates(
        spike_times,
        spike_labels,
        window_size=0.1,
        window_step=0.1)

    coordinates = umap_embedding(firing_rates)

    snub.io.project.add_scatter(
        project_directory,
        'umap embedding',
        coordinates,
        binsize=0.1,
        start_time=start_time)


Add a plot for visualizing the velocity over time
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    traces = {'velocity': np.vstack((velocity_timestamps,mouse_velocity)).T}
    
    snub.io.project.add_traceplot(
        project_directory,
        traces,
        linewidth=2)



Explor behavior and neural activity
-----------------------------------





